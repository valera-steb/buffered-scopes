
вопросы:
.как отрабатывать продолжения - передачю управления другим затронутым скоупам?

.каков общий сценарий использования?

.вызов функций либо обёртка observable/computed ?
.как строиться интерфейс для передачи куда-либо?

.что есть ядром идеи?

.как прервать работу js кода извне?


наброски:
.общий сценария:
    .создать набор скоупов, прокинуть между ними взаимосвязи, запустить выполнение.
    .каждый скоуп может дёргать интерфейс который есть.
    .интерфейс откладывает выполнение либо пробрасывает значение.


.ядро идеи:
    .посылка сообщения.



тестовое применение:
.игра крестики нолики. Где в наличии 3 скоупа:
    .автомата игры:
        .наблюдаемый состояния:
            .чей ход.
            .2-х мерный массив поля.
            .кто выиграл.
        .методы для вызова:
            .координаты для первого.
            .координаты хода второго.

    .2 автомата игроков:
        .по существу они только наблюдают за состоянием игры,
        и дёргают методы установки хода.


.зачем тут buffered-scopes?
    .


текущий вывод:
.эта штука специфическая для control-conversion.
.использование её ещё где-то - пока для меня не явно.
.посему:
    .прописываю интерисующие меня сейчас требования - в виде сценариев использования.
    .и под них делаю компонент.
    .при этом сценарии скорее всего синтетические...




наброски
.нужно как-то оборачивать методы вызова.

.что делать с параметрами передаваемыми внутрь?
    .оставлять внешние ссылки - думаю не безопасно.
    .сериализация - а как быть с передачей интерфейсов?
    => частичная сереализация
        + обёртка вызовов методов - перенос вызова в тот скоуп либо внешний
        + обёртка observable
            - можно получать значение
            - а вот про установку подумать надо...

.где и как эти скоупы собираться будут?
    .т.е. простой вариант:
        .есть место, где создаються все скоупы,
        .отдельными методами прокидываються интерфейсы друг к другу.

    .более сложный:
        .скоупы так-же как и просто объекты регистрируються в контекст.
        .и скорее всего как класс с приватным скоупом.
        .тогда в наружу видны только правильно обёрнутый интерфейс.

    .однако - вопрос передачи параметров так и остался.


.как создать скоуп?
    .связывать ли его с ди?

    .сейчас есть приватные компоненты, во вне они выкидывают только интерфейс.
    .подгружаються как обычные типы...


    .другими словами эта штука похожа на require_for_di-lite/privateScopeWrapper.
    .т.е. предоставляет разширение для ди,
     которое так по хитрому регистрирует эту штуку.

    + проблема в глобальность объекта скоупов.


.свои computed/observable:
    .что на них ложиться?
    .чем отличаються от обычных?

    .для начала... коллбэки - они уже не могут быть простыми функциями
     они должны быть обёрнуты.

    .далее - чтение значения - оно должно происходить напрямую.
     даже скорее так:
        .при первом чтении в данном цикле - запросить из низлежащего данные
         и запомнить их тут.
        .при последующих чтениях отдавать из сохранённого локально.
        .при установки значение - ???




описать бы примеры использования, интерфейс - синтаксис который там применяеться
.более точно - язык и сценарии.














